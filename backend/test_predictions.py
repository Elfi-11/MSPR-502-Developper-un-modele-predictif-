#!/usr/bin/env python3
"""
Script de test pour l'endpoint des pr√©dictions COVID-19
"""

import asyncio
import sys
import os
from datetime import datetime

# Ajouter le chemin du backend au PYTHONPATH
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

async def test_predictions():
    """Test de l'endpoint des pr√©dictions"""
    
    try:
        # Import des modules n√©cessaires
        from app.core.database import get_db
        from app.crud import predi_covid as crud_predi_covid
        from app.crud import location as crud_location
        from app.schemas.schemas import FPrediCovidCreate
        
        print("üîß Test de l'endpoint des pr√©dictions...")
        
        # R√©cup√©rer une session de base de donn√©es
        async for db in get_db():
            try:
                # Test 1: V√©rifier la connexion √† la base de donn√©es
                print("‚úÖ Connexion √† la base de donn√©es r√©ussie")
                
                # Test 2: Cr√©er une location de test
                test_location = await crud_location.obtenir_ou_creer_pays(db, "Test Country")
                print(f"‚úÖ Location cr√©√©e/r√©cup√©r√©e: {test_location.location_name} (ID: {test_location.location_id})")
                
                # Test 3: Cr√©er une pr√©diction de test
                test_prediction = FPrediCovidCreate(
                    date_predite=datetime.now().date(),
                    location_id=test_location.location_id,
                    indicateur="test_cases",
                    horizon=30,
                    valeur_predite=100.0,
                    model_name="Test Model"
                )
                
                saved_pred = await crud_predi_covid.creer_prediction_covid(db, test_prediction)
                print(f"‚úÖ Pr√©diction de test cr√©√©e: ID {saved_pred.pred_id}")
                
                # Test 4: R√©cup√©rer les pr√©dictions
                predictions = await crud_predi_covid.liste_predictions_covid(db, limit=5)
                print(f"‚úÖ {len(predictions)} pr√©dictions r√©cup√©r√©es de la base")
                
                # Test 5: Nettoyer les donn√©es de test
                await crud_predi_covid.supprimer_prediction_covid(db, saved_pred.pred_id)
                print("‚úÖ Donn√©es de test nettoy√©es")
                
                print("\nüéâ Tous les tests sont pass√©s avec succ√®s !")
                print("\nüìã Pour tester l'endpoint complet:")
                print("1. D√©marre le serveur: python -m uvicorn app.main:app --reload")
                print("2. Va sur: http://localhost:8000/docs")
                print("3. Teste l'endpoint: POST /api/predictions/generate/{year}")
                
            except Exception as e:
                print(f"‚ùå Erreur lors du test: {str(e)}")
                raise
            finally:
                break
                
    except Exception as e:
        print(f"‚ùå Erreur critique: {str(e)}")
        print("\nüîß V√©rifications √† faire:")
        print("1. Le fichier .env contient-il DATABASE_URL?")
        print("2. La base de donn√©es PostgreSQL est-elle d√©marr√©e?")
        print("3. Les tables sont-elles cr√©√©es? (python app/create_database.py)")

if __name__ == "__main__":
    asyncio.run(test_predictions()) 